package org.wso2.carbon.connector.integration.test.sendgrid;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.apache.axiom.om.util.Base64;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.wso2.connector.integration.test.base.ConnectorIntegrationTestBase;
import org.wso2.connector.integration.test.base.RestResponse;

public class SendGridConnectorIntegrationTest extends ConnectorIntegrationTestBase {

    private Map<String, String> esbRequestHeadersMap;

    private Map<String, String> apiRequestHeadersMap;

    private String apiEndpointUrl;

    /**
     * Set up the environment.
     */
    @BeforeClass(alwaysRun = true)
    public void setEnvironment() throws Exception {

        esbRequestHeadersMap = new HashMap<String, String>();

        apiRequestHeadersMap = new HashMap<String, String>();

        init("sendgrid-connector-1.0.0");

        esbRequestHeadersMap.put("Accept-Charset", "UTF-8");
        esbRequestHeadersMap.put("Content-Type", "application/json");
        esbRequestHeadersMap.put("Accept", "application/json");


        apiRequestHeadersMap.putAll(esbRequestHeadersMap);

        apiEndpointUrl = connectorProperties.getProperty("apiUrl");

    }

 /**
     * Positive test case for getList method with mandatory parameters.
     *
     * @throws JSONException
     * @throws IOException
     */

    @Test(priority = 1, description = "SendGrid {getList} integration test with mandatory parameters.")
    public void testgetListWithMandatoryParameters() throws IOException, JSONException {

        esbRequestHeadersMap.put("Action", "urn:getList");
        RestResponse<JSONObject> esbRestResponse = sendJsonRestRequest(proxyUrl, "POST", esbRequestHeadersMap, "esb_getList_mandatory.json");

        final String apiEndpoint = connectorProperties.getProperty("apiUrl") +"/lists/get.json?"+"api_user="+connectorProperties.getProperty("apiUser")+"&"+"api_key="+connectorProperties.getProperty("apiKey");

        RestResponse<JSONObject> apiRestResponse = sendJsonRestRequest(apiEndpoint, "GET", apiRequestHeadersMap);

       // Assert.assertEquals(esbRestResponse.getHttpStatusCode(), apiRestResponse.getHttpStatusCode());


    }

    /**
     * Positive test case for getList method with Optional parameters.
     *
     * @throws JSONException
     * @throws IOException
     */

    @Test(priority = 1, description = "SendGrid {getList} integration test with optional parameters.")
    public void testgetListWithOptionalParameters() throws IOException, JSONException {

        esbRequestHeadersMap.put("Action", "urn:getList");
        RestResponse<JSONObject> esbRestResponse = sendJsonRestRequest(proxyUrl, "POST", esbRequestHeadersMap, "esb_getList_optional.json");

        final String apiEndpoint = connectorProperties.getProperty("apiUrl") +"/lists/get.json?"+"api_user="+connectorProperties.getProperty("apiUser")+
                "&"+"api_key="+connectorProperties.getProperty("apiKey")+"&" + "list="+connectorProperties.getProperty("list");

        RestResponse<JSONObject> apiRestResponse = sendJsonRestRequest(apiEndpoint, "GET", apiRequestHeadersMap);
       // Assert.assertEquals(esbRestResponse.getHttpStatusCode(), apiRestResponse.getHttpStatusCode());

    }


   /**
     * Negative test case for getList method with Mandatory parameters.
     *
     * @throws JSONException
     * @throws IOException
     */

    @Test(priority = 1, description = "SendGrid {getList} integration test with optional parameters.")
    public void testgetListWithMandatoryParameters() throws IOException, JSONException {

        esbRequestHeadersMap.put("Action", "urn:getList");
        RestResponse<JSONObject> esbRestResponse = sendJsonRestRequest(proxyUrl, "POST", esbRequestHeadersMap, "esb_getList_negative.json");

        final String apiEndpoint = connectorProperties.getProperty("apiUrl") +"/lists/get.json?"+"api_user="+connectorProperties.getProperty("apiUser")+
                "&"+"api_key="+connectorProperties.getProperty("apiKeyN");

        RestResponse<JSONObject> apiRestResponse = sendJsonRestRequest(apiEndpoint, "GET", apiRequestHeadersMap);
        Assert.assertEquals(esbRestResponse.getHttpStatusCode(), apiRestResponse.getHttpStatusCode());

    }



    /**
     * Positive test case for addList method with Mandatory parameters.
     *
     * @throws JSONException
     * @throws IOException
     */
    @Test(priority = 1, description = "SendGrid {addList} integration test with Mandatory parameters.")
    public void testAddListWithMandatoryParameters() throws IOException, JSONException {

        esbRequestHeadersMap.put("Action", "urn:addList");

        RestResponse<JSONObject> esbRestResponse = sendJsonRestRequest(proxyUrl, "POST", esbRequestHeadersMap, "esb_addList_mandatory.json");

        final String apiEndpoint = connectorProperties.getProperty("apiUrl") +"/lists/add.json?"+"api_user="+connectorProperties.getProperty("apiUser")+
                "&"+"api_key="+connectorProperties.getProperty("apiKey")+"&" + "list="+connectorProperties.getProperty("Addlist")+"&"+"name="+connectorProperties.getProperty("name");

        RestResponse<JSONObject> apiRestResponse = sendJsonRestRequest(apiEndpoint, "GET", apiRequestHeadersMap);

        //Assert.assertEquals(esbRestResponse.getHttpStatusCode(), apiRestResponse.getHttpStatusCode());

    }


    /**
     * Positive test case for addList method with Optional parameters.
     *
     * @throws JSONException
     * @throws IOException
     */
    @Test(priority = 1, description = "SendGrid {addList} integration test with Optional parameters.")
    public void testAddListWithOptionalParameters() throws IOException, JSONException {

        esbRequestHeadersMap.put("Action", "urn:addList");
        RestResponse<JSONObject> esbRestResponse = sendJsonRestRequest(proxyUrl, "POST", esbRequestHeadersMap, "esb_addList_optional.json");

        final String apiEndpoint = connectorProperties.getProperty("apiUrl") +"/lists/add.json?"+"api_user="+connectorProperties.getProperty("apiUser")+
                "&"+"api_key="+connectorProperties.getProperty("apiKey")+"&" + "list="+connectorProperties.getProperty("OAddlist")+"&"+"name="+connectorProperties.getProperty("OAddlistname");

        RestResponse<JSONObject> apiRestResponse = sendJsonRestRequest(apiEndpoint, "GET", apiRequestHeadersMap);

        //Assert.assertEquals(esbRestResponse.getHttpStatusCode(), apiRestResponse.getHttpStatusCode());

    }

    /**
     * Positive test case for editList method with mandatory parameters.
     *
     * @throws JSONException
     * @throws IOException
     */

    @Test(priority = 1, description = "SendGrid {editList} integration test with mandatory parameters.")
    public void testeditListWithMandatoryParameters() throws IOException, JSONException {

        esbRequestHeadersMap.put("Action", "urn:editList");
        RestResponse<JSONObject> esbRestResponse = sendJsonRestRequest(proxyUrl, "POST", esbRequestHeadersMap, "esb_editList_mandatory.json");

        final String apiEndpoint = connectorProperties.getProperty("apiUrl") +"/lists/get.json?"+"api_user="+connectorProperties.getProperty("apiUser")+"&"+"api_key="+connectorProperties.getProperty("apiKey")+
                "list="+connectorProperties.getProperty("Elist")+ "newlist="+connectorProperties.getProperty("NEWlist");

        RestResponse<JSONObject> apiRestResponse = sendJsonRestRequest(apiEndpoint, "GET", apiRequestHeadersMap);

     //   Assert.assertEquals(esbRestResponse.getHttpStatusCode(), apiRestResponse.getHttpStatusCode());
    }


    /**
     * Positive test case for deleteList method with mandatory parameters.
     *
     * @throws JSONException
     * @throws IOException
     */

    @Test(priority = 1, description = "SendGrid {deleteList} integration test with mandatory parameters.")
    public void testDeleteListWithMandatoryParameters() throws IOException, JSONException {

        esbRequestHeadersMap.put("Action", "urn:deleteList");
        RestResponse<JSONObject> esbRestResponse = sendJsonRestRequest(proxyUrl, "POST", esbRequestHeadersMap, "esb_deleteList_mandatory.json");

        final String apiEndpoint = connectorProperties.getProperty("apiUrl") +"/lists/get.json?"+"api_user="+connectorProperties.getProperty("apiUser")+"&"+"api_key="+connectorProperties.getProperty("apiKey")+
                "&"+"list="+connectorProperties.getProperty("deletelist");

        RestResponse<JSONObject> apiRestResponse = sendJsonRestRequest(apiEndpoint, "GET", apiRequestHeadersMap);
       // Assert.assertEquals(esbRestResponse.getHttpStatusCode(), apiRestResponse.getHttpStatusCode());

    }




    /**
     * Negative test case for getList method with Mandatory parameters.
     *
     * @throws JSONException
     * @throws IOException
     */

    @Test(priority = 1, description = "SendGrid {getList} integration test with optional parameters.")
    public void testgetListWithMandatoryParameters() throws IOException, JSONException {

        esbRequestHeadersMap.put("Action", "urn:getList");
        RestResponse<JSONObject> esbRestResponse = sendJsonRestRequest(proxyUrl, "POST", esbRequestHeadersMap, "esb_getList_negative.json");

        final String apiEndpoint = connectorProperties.getProperty("apiUrl") +"/lists/get.json?"+"api_user="+connectorProperties.getProperty("apiUser")+
                "&"+"api_key="+connectorProperties.getProperty("apiKeyN");

        RestResponse<JSONObject> apiRestResponse = sendJsonRestRequest(apiEndpoint, "GET", apiRequestHeadersMap);
       // Assert.assertEquals(esbRestResponse.getHttpStatusCode(), apiRestResponse.getHttpStatusCode());

    }


    /**
     * Positive test case for addCategory method with Mandatory parameters.
     *
     * @throws JSONException
     * @throws IOException
     */
    @Test(priority = 1, description = "SendGrid {addCategory} integration test with Mandatory parameters.")
    public void testAddCategoryWithMandatoryParameters() throws IOException, JSONException {

        esbRequestHeadersMap.put("Action", "urn:addCategory");

        RestResponse<JSONObject> esbRestResponse = sendJsonRestRequest(proxyUrl, "POST", esbRequestHeadersMap, "esb_addCategory_mandatory.json");

        final String apiEndpoint = connectorProperties.getProperty("apiUrl") +"/category/add.json?"+"api_user="+connectorProperties.getProperty("apiUser")+
                "&"+"api_key="+connectorProperties.getProperty("apiKey")+"&"+"category="+connectorProperties.getProperty("categoryName") +
                "&"+"name="+connectorProperties.getProperty("nameofMarketingEmail");

        RestResponse<JSONObject> apiRestResponse = sendJsonRestRequest(apiEndpoint, "GET", apiRequestHeadersMap);

        //Assert.assertEquals(esbRestResponse.getHttpStatusCode(), apiRestResponse.getHttpStatusCode());

    }



}
